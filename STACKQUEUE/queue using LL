class Queue {
    private Node front;
    private Node rear;

    // Inner class to define a node in the linked list
    private class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Constructor to initialize the queue
    public Queue() {
        this.front = null;
        this.rear = null;
    }

    // Enqueue operation to add an element to the queue
    public void enqueue(int value) {
        Node newNode = new Node(value);
        if (rear == null) {
            front = rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }
        System.out.println(value + " enqueued to queue.");
    }

    // Dequeue operation to remove an element from the queue
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return -1;
        } else {
            int value = front.data;
            front = front.next;
            if (front == null) { // If the queue becomes empty after dequeue
                rear = null;
            }
            System.out.println(value + " dequeued from queue.");
            return value;
        }
    }

    // Peek operation to return the front element without removing it
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot peek.");
            return -1;
        } else {
            return front.data;
        }
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return (front == null);
    }

    public static void main(String[] args) {
        Queue queue = new Queue();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        System.out.println("Front element is: " + queue.peek());

        queue.dequeue();
        queue.dequeue();

        System.out.println("Front element after dequeuing elements: " + queue.peek());

        queue.dequeue();
        queue.dequeue();  // Trying to dequeue from an empty queue
    }
}
